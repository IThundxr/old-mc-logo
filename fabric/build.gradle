import net.darkhax.curseforgegradle.TaskPublishCurseForge

plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id 'net.darkhax.curseforgegradle' version '1.1.15'
    id "com.modrinth.minotaur" version "2.+"
}

architectury {
    platformSetupLoomIde()
    fabric()
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }

    // dependencies
    modImplementation("net.fabricmc.fabric-api:fabric-api:${fabric_api_version}")
}

tasks.register('publishCurseForge', TaskPublishCurseForge) {
    apiToken = findProperty('curseforge_token')
    var projectId = findProperty('curseforge_project')

    def mainFile = upload(projectId, file("build/libs/oldmclogo-${mod_version}.jar"))
    mainFile.changelog = "Update"
    mainFile.displayName = "Old MC Logo ${mod_version} Fabric ${minecraft_version}"
    mainFile.addRequirement("fabric-api")
    mainFile.addModLoader("Fabric")
    mainFile.addJavaVersion("Java 17")
    mainFile.releaseType = "release"
}

modrinth {
    token = findProperty("MODRINTH_TOKEN")
    projectId = findProperty("modrinth_project")
    versionNumber = "${minecraft_version}-fabric"
    versionType = "release"
    uploadFile = file("build/libs/oldmclogo-${mod_version}.jar")
    gameVersions = [minecraft_version]
    loaders = ["fabric"]
    dependencies {
        required.project "fabric-api"
    }
}

processResources {
    // include packs
    from(rootProject.file("common/src/main/resources")) {
        include("resourcepacks/")
    }

    // set up properties for filling into metadata
    Map<String, String> properties = Map.of(
            "version", version,
            "fabric_loader_version", fabric_loader_version,
            "fabric_api_version", fabric_api_version,
            "minecraft_version", minecraft_version
    ) as Map<String, String>
    properties.forEach((k, v) -> inputs.property(k, v))

    filesMatching("fabric.mod.json") {
        expand properties
    }
}

shadowJar {
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier.set("dev-shadow")
}

remapJar {
    inputFile.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier.set(null)
}

jar {
    archiveClassifier.set("dev")
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenFabric(MavenPublication) {
            artifactId = archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}
plugins {
    id "com.github.johnrengelman.shadow" version "8.1.1"
    id "me.shedaniel.unified-publishing"
}

architectury {
    platformSetupLoomIde()
    forge()
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

dependencies {
    forge "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }
}

unifiedPublishing {
    project {
        releaseType = "release"
        gameVersions = [minecraft_version]
        gameLoaders = ["forge"]
        displayName = "Old MC Logo $mod_version Forge $minecraft_version"
        mainPublication remapJar

        if (System.getenv("CURSEFORGE_TOKEN")) {
            curseforge {
                token = System.getenv("CURSEFORGE_TOKEN")
                id = project.curseforge_id
            }
        }

        if (System.getenv("MODRINTH_TOKEN")) {
            modrinth {
                token = System.getenv("MODRINTH_TOKEN")
                id = project.modrinth_id
                version = "$mod_version-forge-mc$minecraft_version"
            }
        }
    }
}
processResources {
    // include packs
    from(rootProject.file("common/src/main/resources")) {
        include("resourcepacks/")
    }

    // set up properties for filling into metadata
    Map<String, String> properties = Map.of(
            "version", version,
            "forge_version", forge_version.split("\\.")[0], // only specify major version of forge
            "minecraft_version", minecraft_version,
    ) as Map<String, String>
    properties.forEach((k, v) -> inputs.property(k, v))

    filesMatching("META-INF/mods.toml") {
        expand properties
    }
}

shadowJar {
    exclude "fabric.mod.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier.set("dev-shadow")
}

remapJar {
    inputFile.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier.set(null)
}

jar {
    archiveClassifier.set("dev")
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}